package com.eunio.healthapp.domain.repository

import com.eunio.healthapp.domain.model.Insight
import com.eunio.healthapp.domain.model.InsightType
import com.eunio.healthapp.domain.util.Result

/**
 * Repository interface for health insight data operations.
 * Handles insight generation, retrieval, and user interaction tracking.
 */
interface InsightRepository {
    
    /**
     * Retrieves all unread insights for the user, ordered by generation date (newest first).
     * @param userId The ID of the user
     */
    suspend fun getUnreadInsights(userId: String): Result<List<Insight>>
    
    /**
     * Marks a specific insight as read by the user.
     * @param insightId The ID of the insight to mark as read
     */
    suspend fun markInsightAsRead(insightId: String): Result<Unit>
    
    /**
     * Retrieves the user's insight history, including both read and unread insights.
     * @param userId The ID of the user
     * @param limit Maximum number of insights to retrieve
     */
    suspend fun getInsightHistory(userId: String, limit: Int = 50): Result<List<Insight>>
    
    /**
     * Saves a new insight generated by the system.
     * @param insight The insight data to save
     */
    suspend fun saveInsight(insight: Insight): Result<Unit>
    
    /**
     * Retrieves insights of a specific type for the user.
     * @param userId The ID of the user
     * @param type The type of insights to retrieve
     * @param limit Maximum number of insights to retrieve
     */
    suspend fun getInsightsByType(
        userId: String, 
        type: InsightType, 
        limit: Int = 20
    ): Result<List<Insight>>
    
    /**
     * Retrieves actionable insights that require user attention.
     * @param userId The ID of the user
     */
    suspend fun getActionableInsights(userId: String): Result<List<Insight>>
    
    /**
     * Deletes an insight from the system.
     * @param insightId The ID of the insight to delete
     */
    suspend fun deleteInsight(insightId: String): Result<Unit>
    
    /**
     * Retrieves insights related to specific daily log entries.
     * @param userId The ID of the user
     * @param logIds List of daily log IDs to find related insights for
     */
    suspend fun getInsightsForLogs(userId: String, logIds: List<String>): Result<List<Insight>>
    
    /**
     * Counts the total number of insights for a user.
     * @param userId The ID of the user
     * @param includeRead Whether to include read insights in the count
     */
    suspend fun getInsightCount(userId: String, includeRead: Boolean = true): Result<Int>
    
    /**
     * Retrieves insights with confidence above a certain threshold.
     * @param userId The ID of the user
     * @param minConfidence Minimum confidence level (0.0 to 1.0)
     * @param limit Maximum number of insights to retrieve
     */
    suspend fun getHighConfidenceInsights(
        userId: String, 
        minConfidence: Double = 0.7, 
        limit: Int = 10
    ): Result<List<Insight>>
    
    /**
     * Marks all insights as read for a user.
     * @param userId The ID of the user
     */
    suspend fun markAllInsightsAsRead(userId: String): Result<Unit>
}